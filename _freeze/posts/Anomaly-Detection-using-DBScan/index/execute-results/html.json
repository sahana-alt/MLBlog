{
  "hash": "a03cbe4202fd07eeef4b99c7dbf25b85",
  "result": {
    "markdown": "---\ntitle: Anomaly Detection using DBScan\nimage: image.webp\nauthor: Swapnil Singh\ndate: '2023-11-08'\ncategories:\n  - anomaly detection\n  - clustering\n  - unsupervised learning\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\nAnomaly detection is a crucial task in data analysis, aimed at identifying rare items, events, or observations that differ significantly from the majority of the data. DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a powerful clustering algorithm known for its ability to identify clusters of any shape within a dataset. Leveraging its ability to capture the local density of data points, DBSCAN can be a useful tool for anomaly detection. In this blog, we will explore the concept of anomaly detection using the DBSCAN algorithm, including an in-depth explanation, its application in detecting outliers, and a step-by-step implementation in Python.\n\n# DBScan\nDBSCAN employs a density-based approach to identify clusters by separating high-density areas from low-density areas. It categorizes data points as core points, border points, or noise points, allowing for the detection of outliers that do not belong to any cluster. We will walk through the entire process, from understanding the DBSCAN algorithm's concepts to applying it to a real-world dataset for anomaly detection. With Python code examples, we will demonstrate how to implement DBSCAN for anomaly detection, assess its performance, and visualize the results using various plotting techniques. By the end of this blog, you will have a comprehensive understanding of the application of DBSCAN in anomaly detection and its practical implementation using real data.\n\n## Python implimentation\n@fig-anomaly shows the clusters for anomaly detection. @fig-anomaly-1 shows the dummy data and @fig-anomaly-2 shows the dummy data in clusters after dbscan but does not have any anomalies. @fig-anomaly-3 shows anomalies in the dummy data with some noise using dbscan. @fig-anomaly-4 shows anomalies in the Iris dataset using dbscan.\n\n::: {#fig-anomaly .cell execution_count=1}\n``` {.python .cell-code}\n# importing libraries\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.datasets import make_blobs, make_moons, load_iris\nfrom numpy import random, where\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\n\n# setting random seed for getting the same results\nrandom.seed(7)\n# making clusters with standard diviation of 0.3\nx,y=make_blobs(n_samples=200,centers=1,cluster_std=0.3)\n# plotting the data points\nplt.scatter(x[:,0],x[:,1])\nplt.show()\n\n# creating the dbscan model with minmum samples near the centroid as 20 and cluster radius as 0.28\n# # decreasing min samples will decrease outliers and decreasing eps will increase outliers\nmodel=DBSCAN(eps=0.28,min_samples=20)\n# predicting the cluster lables\npred=model.fit_predict(x)\n\n# getting the index of outliers and printing them\noutlier_index = where(pred==-1)\n\n# getting the value of outliers\noutlier_value=x[outlier_index]\n\n# creating a dataset with noise so that there can be outliers\n# the clusters are well defined if the noise is lower and outliers are also low \nx,y=make_moons(n_samples=400,noise=0.4,random_state=1)\n# plotting the dataset\nplt.scatter(x[:,0],x[:,1],c=y)\nplt.show()\n\n# creating the dbscan model with minmum samples near the centroid as 5 and cluster radiusas 0.2\nmodel=DBSCAN(eps=0.2,min_samples=5)\n# assigning clusters\npred=model.fit_predict(x)\n\n# get index of outliers and print them\noutlier_index=where(pred==-1)\n\n# get value of outliers and print them\noutlier_value=x[outlier_index]\n\n# plot scatter plot of the dataset\nplt.scatter(x[:,0],x[:,1],c=y)\n\n# plotting outliers in red\nplt.scatter(outlier_value[:,0],outlier_value[:,1],color='r')\nplt.show()\n\ndata = load_iris()\n# creating the dbscan model with minmum samples near the centroid as 5 and cluster radiusas 0.5\nmodel=DBSCAN(eps=0.5,min_samples=5)\n# fitting the data\nmodel.fit(data.data)\n\npca=PCA(n_components=2).fit(data.data)\npca_scatter=pca.transform(data.data)\n\n# storing the shape of the pca\nsh=pca_scatter.shape\n\n# plotting data and outliers\nfor i in range(0,sh[0]):\n    if model.labels_[i]==0:\n        cluster1=plt.scatter(pca_scatter[i,0],pca_scatter[i,1],c='y',marker='x')\n    elif model.labels_[i]==1:\n        cluster2=plt.scatter(pca_scatter[i,0],pca_scatter[i,1],c='g',marker='+')\n    else:\n        cluster3=plt.scatter(pca_scatter[i,0],pca_scatter[i,1],c='r',marker='o')\nplt.legend([cluster1,cluster2,cluster3],['label0','label1','outlier'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Plot of dummy data](index_files/figure-html/fig-anomaly-output-1.png){#fig-anomaly-1 width=571 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n![Plot after DBScan](index_files/figure-html/fig-anomaly-output-2.png){#fig-anomaly-2 width=582 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n![Plot after DBScan on dummy data with noise showing anomalies](index_files/figure-html/fig-anomaly-output-3.png){#fig-anomaly-3 width=582 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n![Anomaly Detection on Iris Dataset](index_files/figure-html/fig-anomaly-output-4.png){#fig-anomaly-4 width=582 height=415}\n:::\n\nAnomaly Detection Results\n:::\n\n\n# Conclusion\nIn conclusion, DBSCAN emerges as a valuable tool for anomaly detection, enabling the identification of outliers and rare occurrences within datasets. Its ability to delineate clusters based on local density offers a robust mechanism for isolating data points that deviate significantly from the general patterns. By leveraging the density-based approach and the concept of core points, border points, and noise points, DBSCAN facilitates the detection of anomalies without the need for predefined cluster shapes. Through this blog, we have explored the intricacies of the DBSCAN algorithm, its application in outlier detection, and its implementation using Python. By delving into practical examples and visualization techniques, we have demonstrated the efficacy of DBSCAN in identifying anomalies, providing readers with a comprehensive understanding of its utility and application in real-world scenarios.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}